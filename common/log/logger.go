package log

// LogLevel 日志级别
type LogLevel int

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//	2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

const (
	// !nashtsai! following level also match syslog.Priority value
	LOG_UNKNOWN LogLevel = iota - 2 // -2
	LOG_OFF     LogLevel = iota - 1 // 0
	LOG_FATAL                       // 1
	LOG_PANIC                       // 2
	LOG_ERROR   LogLevel = iota + 1 // 5
	LOG_WARN                        // 6
	LOG_INFO    LogLevel = iota + 4 // 10
	LOG_DEBUG                       // 11
)

var LevelNames = map[LogLevel]string{
	LOG_UNKNOWN: "UNKNOWN",
	LOG_FATAL:   "FATAL",
	LOG_PANIC:   "PANIC",
	LOG_ERROR:   "ERROR",
	LOG_WARN:    "WARN",
	LOG_INFO:    "INFO",
	LOG_DEBUG:   "DEBUG",
}

// Logger interface
type Logger interface {
	Level() LogLevel
	SetLevel(l LogLevel)
	Flush()
	Print(v ...interface{})
	Printf(format string, v ...interface{})
	Println(v ...interface{})
	Fatal(v ...interface{})
	Fatalf(format string, v ...interface{})
	Fatalln(v ...interface{})
	Panic(v ...interface{})
	Panicf(format string, v ...interface{})
	Panicln(v ...interface{})
	Error(v ...interface{})
	Errorf(format string, v ...interface{})
	Errorln(v ...interface{})
	Warn(v ...interface{})
	Warnf(format string, v ...interface{})
	Warnln(v ...interface{})
	Info(v ...interface{})
	Infof(format string, v ...interface{})
	Infoln(v ...interface{})
	Debug(v ...interface{})
	Debugf(format string, v ...interface{})
	Debugln(v ...interface{})
}

// StdLogger 标准库日志接口
type StdLogger interface {
	Print(v ...interface{})
	Printf(format string, v ...interface{})
	Println(v ...interface{})
	Fatal(v ...interface{})
	Fatalf(format string, v ...interface{})
	Fatalln(v ...interface{})
	Panic(v ...interface{})
	Panicf(format string, v ...interface{})
	Panicln(v ...interface{})
}

// SimpleLogger 简单日志接口
type SimpleLogger interface {
	Log(v ...interface{})
	Logf(format string, v ...interface{})
	Logln(v ...interface{})
}
